// Place your key bindings in this file to override the defaultsauto[]
[
  // You shoud:
  // remap control keys in insert mode by vscode keybind and do not send keys to neovim,
  // remap control keys in other mode by vscode keybind and could be able to send keys to neovim,
  // do not map character in insert mode,
  // remap character in non-insert mode by neovim init.vim.

  // up: display line up
  {
    "key": "up",
    "command": "vscode-neovim.send",
    "args": "gk",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // down: display line down
  {
    "key": "down",
    "command": "vscode-neovim.send",
    "args": "gj",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // ctrl+a: move the cursor to start of the line
  {
    "key": "ctrl+a",
    "command": "cursorLineStart",
    "when": "editorTextFocus && neovim.mode == insert"
  },
  {
    "key": "ctrl+a",
    "command": "vscode-neovim.send",
    "args": "0",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // ctrl+e: move the cursor to end of the line
  {
    "key": "ctrl+e",
    "command": "cursorLineEnd",
    "when": "editorTextFocus && neovim.mode == insert"
  },
  {
    "key": "ctrl+e",
    "command": "vscode-neovim.send",
    "args": "$",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // ctrl+d: scroll page down
  {
    "key": "ctrl+d",
    "command": "scrollPageDown",
    "when": "textInputFocus"
  },
  // ctrl+b: scroll page up
  {
    "key": "ctrl+b",
    "command": "scrollPageUp",
    "when": "textInputFocus"
  },
  // ctrl+up: scroll content up
  {
    "key": "ctrl+up",
    "command": "scrollLineDown",
    "when": "textInputFocus"
  },
  // ctrl+down: scroll content down
  {
    "key": "ctrl+down",
    "command": "scrollLineUp",
    "when": "textInputFocus"
  },
  // shift+up: shift the line to the up
  {
    "key": "shift+up",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // shift+down: shift the line to the down
  {
    "key": "shift+down",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // shift+left: shift the line to the left
  {
    "key": "shift+left",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && neovim.mode == insert"
  },
  {
    "key": "shift+left",
    "command": "vscode-neovim.send",
    "args": "<<",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // shift+right: shift the line to the right
  {
    "key": "shift+right",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && neovim.mode == insert"
  },
  {
    "key": "shift+right",
    "command": "vscode-neovim.send",
    "args": ">>",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // ctrl+u: delete all char to the left of the cursor
  {
    "key": "ctrl+u",
    "command": "deleteAllLeft",
    "when": "editorTextFocus && neovim.mode == insert"
  },
  // ctrl+k: delete all char to the right of the cursor
  {
    "key": "ctrl+k",
    "command": "deleteAllRight",
    "when": "editorTextFocus && neovim.mode == insert"
  },
  // ctrl+w: delete word left
  {
    "key": "ctrl+w",
    "command": "cjkWordHandler.deleteWordStartLeft",
    "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == insert"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeGroup"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeActiveEditor"
  },
  // ctrl+l: delete one char to the right of the cursor
  {
    "key": "ctrl+l",
    "command": "cjkWordHandler.deleteWordEndRight",
    "when": "editorTextFocus && neovim.mode == insert"
  },
  // ctrl+z: undo
  {
    "key": "ctrl+z",
    "command": "undo"
  },
  // ctrl+r: redo
  {
    "key": "ctrl+r",
    "command": "redo"
  },
  // ctrl+\: trigger suggestion
  {
    "key": "ctrl+oem_5",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  // tab: next suggestion item
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "tab",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  // shift+tab: previous suggestion item
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "shift+tab",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  // alt+\: search snippet
  {
    "key": "alt+oem_5",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus"
  },
  // ctrl+n: add a cursor on the next word
  {
    "key": "ctrl+n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+n",
    "command": "vscode-neovim.send",
    "args": "<C-N>",
    "when": "editorTextFocus && neovim.mode == visual"
  },
  // ctrl+shift+n: add a cursor on the previous word
  {
    "key": "ctrl+shift+n",
    "command": "editor.action.addSelectionToPreviousFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "vscode-neovim.send",
    "args": "<C-S-N>",
    "when": "editorTextFocus && neovim.mode == visual"
  },
  // ctrl+shift+l: add a cursor on all match word
  {
    "key": "ctrl+shift+l",
    "command": "vscode-neovim.send",
    "args": "<C-S-L>",
    "when": "editorTextFocus && neovim.mode == visual"
  },
  // ctrl+c: copy in normal mode
  {
    "key": "ctrl+c",
    "command": "editor.action.clipboardCopyAction",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // ctrl+f: find content
  {
    "key": "ctrl+f",
    "command": "-vscode-neovim.ctrl-f"
  },
  {
    "key": "ctrl+f",
    "command": "vscode-neovim.send",
    "args": "<C-F>",
    "when": "editorFocus && neovim.mode == visual"
  },
  // ctrl+m: bookmark key prefix
  {
    "key": "ctrl+m m",
    "command": "bookmarks.toggle",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m i",
    "command": "bookmarks.toggleLabeled",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m l",
    "command": "bookmarks.list",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m shift+l",
    "command": "bookmarks.listFromAllFiles",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m c",
    "command": "bookmarks.clear",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m shift+c",
    "command": "bookmarks.clearFromAllFiles",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m n",
    "command": "bookmarks.jumpToNext",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+m b",
    "command": "bookmarks.jumpToPrevious",
    "when": "editorTextFocus"
  },
  // ctrl+k n: new file
  {
    "key": "ctrl+k n",
    "command": "workbench.action.files.newUntitledFile"
  },
  // ctrl+k o: open file
  {
    "key": "ctrl+k o",
    "command": "workbench.action.files.openFile",
    "when": "true"
  },
  // ctrl+k r: open rencent file
  {
    "key": "ctrl+k r",
    "command": "workbench.action.openRecent"
  },
  //  ctrl+shift+w: close file
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "ctrl+shift+w",
    "command": "-workbench.action.closeWindow"
  },
  // ctrl+k w: close other editors
  {
    "key": "ctrl+k w",
    "command": "workbench.action.closeOtherEditors"
  },
  // tab: switch to next group
  {
    "key": "tab",
    "command": "workbench.action.focusNextGroup",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // shift+tab: switch to previous group
  {
    "key": "shift+tab",
    "command": "workbench.action.focusPreviousGroup",
    "when": "editorTextFocus && neovim.mode != insert"
  },
  // f1: toggle side bar
  {
    "key": "f1",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  // alt+`: open terminal
  {
    "key": "alt+oem_3",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  // shift+alt+e: open active file in explorer
  {
    "key": "shift+alt+e",
    "command": "remote-wsl.revealInExplorer",
    "when": "editorFocus && remoteName == 'wsl'"
  },
  {
    "key": "shift+alt+e",
    "command": "revealFileInOS",
    "when": "editorFocus"
  },
  // shift+alt+r: run code
  {
    "key": "shift+alt+r",
    "command": "code-runner.run"
  },
  // alt+t: toggle capture word
  {
    "key": "alt+t",
    "command": "translator.toggleCaptureWord"
  },
  // shift+alt+t: translate selected text
  {
    "key": "shift+alt+t",
    "command": "translator.translate"
  },
  // shift+alt+c: caclulator
  {
    "key": "shift+alt+c",
    "command": "calculator.showInput"
  }
]
